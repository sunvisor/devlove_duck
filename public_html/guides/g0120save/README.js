Ext.data.JsonP.g0120save({"guide":"<h1 id='g0120save-section-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AB%E7%99%BB%E9%8C%B2'>サーバーに登録</h1>\n\n<ul>\n<li>追加、編集した結果をサーバーに保存したくなります。</li>\n</ul>\n\n\n<p>Sencha Touch ではいくつかの方法でサーバーのデータを更新することができます。</p>\n\n<ul>\n<li><code>Ext.Ajax.request()</code> メソッドでサーバーとAjax通信をする。</li>\n<li><code>Formのsubmit()</code> メソッドでフォームの内容を送信する。</li>\n<li>StoreのapiコンフィグにCRUD(Create/Read/Update/Delete)のURLをセットして、Storeの更新情報をサーバーに送信する。</li>\n</ul>\n\n\n<p>他にもいくつかの方法がありますが、ここでは触れません。</p>\n\n<h3 id='g0120save-section-ext.ajax.request%28%29'>Ext.Ajax.request()</h3>\n\n<p>サーバーにAjaxリクエストを送信します。</p>\n\n<pre><code>Ext.Ajax.request({\n    url: 'ajax_demo/sample.json',\n    method: 'POST',\n    success: function(response, opts) {\n        var obj = Ext.decode(response.responseText);\n        console.dir(obj);\n    },\n    failure: function(response, opts) {\n        console.log('server-side failure with status code ' + response.status);\n    }\n});\n</code></pre>\n\n<ul>\n<li><code>url</code>: リクエスト先</li>\n<li><code>method</code>: HTTPメソッド</li>\n<li><code>success</code>: 通信成功時のコールバック関数</li>\n<li><code>failure</code>: 通信失敗時のコールバック関数</li>\n</ul>\n\n\n<h3 id='g0120save-section-form%E3%81%AEsubmit%28%29'>Formのsubmit()</h3>\n\n<pre><code>form.submit({\n    url: 'url/to/submit/to',\n    method: 'POST',\n    success: function() {\n        alert('form submitted successfully!');\n    }\n});\n</code></pre>\n\n<ul>\n<li>パラメーターはほぼ<code>Ext.Ajax.request</code>と同じ</li>\n<li>フォームのフィールドの値がパラメーターとして送られる</li>\n<li><code>params</code>プロパティを指定すると、そこで指定したパラメーターも送られる</li>\n</ul>\n\n\n<h3 id='g0120save-section-store%E3%81%AEsync%28%29'>Storeのsync()</h3>\n\n<p>プロキシのコンフィグで、<code>url</code> の代わりに <code>api</code> を指定します。</p>\n\n<pre><code>proxy: {\n    type: 'ajax'\n    api: {\n        create: 'ajax/create.php',\n        read:   'ajax/read.php',\n        update: 'ajax/update.php',\n        destroy:'ajax/delete.php'\n    }\n}\n</code></pre>\n\n<p>Storeに変更を書けた後で、<code>sync()</code> メソッドを呼び出します。</p>\n\n<pre><code>store.add(rec);\nstore.sync();\n</code></pre>\n\n<p>こうすると、Storeに対する変更が、C/R/U/D の4つのリクエストにまとめられてサーバーに送信されます。\n詳しいことはここでは省略します。</p>\n\n<p>ここでは、2番目のFormの <code>submit()</code> メソッドを使ってサーバーにデータを送信しましょう。</p>\n\n<h2 id='g0120save-section-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86-%2312'>やってみよう #12</h2>\n\n<blockquote><p>※ 直前のハンズオンがうまくいかなかった方のために、ここまでの結果を用意しています。\n<a href=\"http://sencha.sunvisor.net/devlove/cl11.zip\">こちらからダウンロードして</a>\nドキュメントルートのdevloveディレクトリの下に解凍してください。</p></blockquote>\n\n<p>やってみよう #13 での <code>onTapSaveButton</code> イベントリスナーでは、ローカルのStoreに更新をかけただけでしたが、ここでは、そのデータをサーバーに送信してみましょう。</p>\n\n<ul>\n<li><p>送信先のURlは、</p>\n\n<pre><code>  http://sencha.sunvisor.net/saveperson.php\n</code></pre></li>\n<li><p>メソッドはPOST</p></li>\n<li>フォームにはidフィールドがないので、<code>params</code> プロパティでidを渡してやります</li>\n<li>送信中の待機メッセージを指定できます</li>\n<li>通信が成功したときには、<code>success</code> 関数が呼ばれます。\nその中でStoreの更新をしましょう</li>\n<li>失敗した時には <code>failure</code> 関数が呼ばれます。\nメッセージを表示しましょう</li>\n</ul>\n\n\n<p><code>onTapSaveButton</code> イベントリスナーは次のようになります。</p>\n\n<pre><code>onTapSaveButton: function() {\n    var me = this,\n        edit = me.getEdit(),\n        record = edit.getRecord(),\n        data = edit.getValues(),\n        store = Ext.getStore('Contacts');\n\n    edit.submit({\n        url: '../../saveperson.php',\n        method: 'post',\n        params: {\n            id: record.get('id')\n        },\n        waitMsg: {\n            xtype: 'loadmask',\n            message: '送信中です'\n        },\n\n        success: function(form, ret) {\n            if( record.phantom ) {\n                store.add(record);\n                store.load();\n            }\n            record.set(ret.data);\n            me.getNavi().pop();\n        },\n        failure: function(form, ret) {\n            Ext.Msg.alert('エラーが発生しました', ret.error);\n            me.getNavi().pop();\n        }\n    });\n}\n</code></pre>\n","title":"データの保存"});