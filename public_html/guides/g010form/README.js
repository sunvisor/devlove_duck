Ext.data.JsonP.g010form({"guide":"<h1 id='g010form-section-%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B'>フォームを作る</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/g010form-section-%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0'>フォーム</a></li>\n<li><a href='#!/guide/g010form-section-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86-%2310'>やってみよう #10</a></li>\n</ol>\n</div>\n\n<p>詳細パネルを表示している状態から、そのデータを編集できるようにしたいので、\nまずはフォームを作りましょう。\n次の手順でやってみましょう。</p>\n\n<ul>\n<li>データを編集するフォームビューを作成します。</li>\n<li>データをそのフォームにセットして表示します。</li>\n<li>変更されたデータをストアに返して更新します。</li>\n<li>更新されたストアのデータをサーバーに保存します。</li>\n</ul>\n\n\n<h2 id='g010form-section-%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0'>フォーム</h2>\n\n<p>フォームは、入力フィールドを配置するコンテナーです。\nフィールドやそのデータを操作するための便利なメソッドが用意されています。</p>\n\n<p>このサンプルプログラムのデータを編集できるようなフォームを定義してみましょう。</p>\n\n<h2 id='g010form-section-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86-%2310'>やってみよう #10</h2>\n\n<blockquote><p>※ 直前のハンズオンがうまくいかなかった方のために、ここまでの結果を用意しています。\n<a href=\"http://sencha.sunvisor.net/devlove/cl09.zip\">こちらからダウンロードして</a>\nドキュメントルートのdevloveディレクトリの下に解凍してください。</p></blockquote>\n\n<p>まずは、フォームを定義します。</p>\n\n<pre><code>Ext.define('ContactList.view.Edit', {\n    extend: 'Ext.form.Panel',\n\n    requires: [\n        'Ext.form.FieldSet'\n    ],\n\n    alias: 'widget.contactedit',\n\n    config: {\n        items: [{\n            xtype: 'fieldset',\n            items: [{\n                xtype: 'textfield',\n                label: '氏名',\n                name: 'name'\n            }, {\n                xtype: 'textfield',\n                label: 'ふりがな',\n                name: 'name_kana'\n            }]\n        }]\n    }\n});\n</code></pre>\n\n<ul>\n<li>定義をしたら表示をさせたくなりますね。\nNavigationViewにボタンを用意して、それがタップされたら表示するようにしましょう。</li>\n<li>このボタンは後で、データの追加の時に使います。</li>\n</ul>\n\n\n<h3 id='g010form-section-navigationview%E3%81%AB%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0'>NavigationViewにボタンを追加</h3>\n\n<p>app/view/Navi.js の configブロックに次のようなコードブロックを追加します。</p>\n\n<pre><code>    navigationBar: {\n        items: [{\n            xtype: 'button',\n            text: '追加',\n            itemId: 'addButton',\n            hidden: false,\n            align: 'right'\n        }]\n    }\n</code></pre>\n\n<ul>\n<li>これはNavigationViewのタイトルバーの設定をするnavigationBarプロパティに、子アイテムとしてボタンを追加しています。</li>\n<li>itemId コンフィグに addButton と設定しています。</li>\n</ul>\n\n\n<h3 id='g010form-section-navi%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90'>Naviコントローラーの作成</h3>\n\n<p>追加したボタンが押された時のリスナーを設定します。\nNaviビューで発火するイベントですので、それ用のコントローラーを用意しましょう。</p>\n\n<ul>\n<li><p>Sencha Cmdでコントローラーを作成します。</p>\n\n<pre><code>  sencha generate controller Navi.js\n</code></pre></li>\n<li><p>app/controller/Navi.jsが作成されます。</p></li>\n<li>コントローラーをapp.jsに登録します。</li>\n</ul>\n\n\n<h3 id='g010form-section-app.js%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%82%92%E8%BF%BD%E5%8A%A0'>app.jsにコントローラーを追加</h3>\n\n<pre><code>    controllers: [\n        'List',\n        'Navi'  // 追加\n    ],\n</code></pre>\n\n<h3 id='g010form-section-navi%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A'>Naviコントローラーの設定</h3>\n\n<ul>\n<li>app/controller/Navi.js を開きます。</li>\n<li><code>navi</code> - <code>xtype</code>での指定</li>\n<li><p><code>addButton</code> - <code>xtype</code>と<code>itemId</code>での指定</p></li>\n<li><p><code>refs</code>を設定します。NavigetionViewと追加ボタンへの参照を定義します。</p>\n\n<pre><code>  refs: {\n      navi: 'contactnavi',\n      addButton: 'button#addButton'\n  },\n</code></pre></li>\n<li><p><code>control</code>を定義します。追加ボタンのtapイベントにリスナーを設定します。</p>\n\n<pre><code>  control: {\n      addButton: {\n          tap: 'onTapAddButton'\n      }\n  }\n</code></pre></li>\n<li><p>リスナー本体を書きます。ここではフォームを生成してNavigationViewに<code>push</code>しています。</p>\n\n<pre><code>  onTapAddButton: function() {\n      var me = this,\n          form = Ext.create('ContactList.view.Edit');\n\n      me.getNavi().push(form);\n  }\n</code></pre></li>\n<li><p>ここで<code>ContactList.view.Edit</code>クラスを使っているので<code>requires</code>に追加します。</p>\n\n<pre><code>  requires: [\n      'ContactList.view.Edit'\n  ],\n</code></pre></li>\n</ul>\n\n\n<h3 id='g010form-section-%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AB%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0'>フォームにフィールドを追加</h3>\n\n<ul>\n<li>全ての項目をフォームに追加します。</li>\n<li>メールアドレス／電話などはそれ用のフィールドにしましょう。</li>\n<li>日付を入力できるフィールドもあります。誕生日の欄に使いましょう。</li>\n<li><p>リストから値を選択できるフィールドもあります。性別の欄に使いましょう。</p>\n\n<p>  [WARN][Anonymous] [Ext.Loader] Synchronously loading 'Ext.field.DatePicker';\n  consider adding 'Ext.field.DatePicker' explicitly as a require of the\n  corresponding class</p></li>\n<li><p>コンソールを見て上のようなメッセージが表示されたら、<code>requires</code>に追加が必要です。</p></li>\n<li><p>完成したコードは次のようになります。少し長いですが、難しいものではありません。</p>\n\n<pre><code>  Ext.define('ContactList.view.Edit', {\n      extend: 'Ext.form.Panel',\n\n      requires: [\n          'Ext.form.FieldSet',\n          'Ext.field.DatePicker',\n          'Ext.field.Email'\n      ],\n\n      alias: 'widget.contactedit',\n\n      config: {\n          items: [{\n              xtype: 'fieldset',\n              items: [{\n                  xtype: 'textfield',\n                  label: '姓',\n                  name: 'last_name'\n              }, {\n                  xtype: 'textfield',\n                  label: '名',\n                  name: 'first_name'\n              }, {\n                  xtype: 'textfield',\n                  label: 'セイ',\n                  name: 'last_kana'\n              }, {\n                  xtype: 'textfield',\n                  label: 'メイ',\n                  name: 'first_kana'\n              }]\n          }, {\n              xtype: 'fieldset',\n              items: [{\n                  xtype: 'datepickerfield',\n                  label: '誕生日',\n                  dateFormat: 'Y-m-d',\n                  name: 'birthday',\n                  picker: {\n                      yearFrom: 1920\n                  }\n              }, {\n                  xtype: 'selectfield',\n                  label: '性別',\n                  name: 'gender',\n                  options: [{\n                      text: '男', value: '男'\n                  }, {\n                      text: '女', value: '女'\n                  }]\n              }]\n          }, {\n              xtype: 'fieldset',\n              items: [{\n                  xtype: 'emailfield',\n                  label: 'メール',\n                  name: 'email'\n              }, {\n                  xtype: 'textfield',\n                  label: '携帯電話',\n                  // 電話番号用のtouch独自コントロールはないので\n                  // componentコンフィグにtype: 'tel' を指定\n                  component: {\n                      type: 'tel'\n                  },\n                  name: 'phone'\n              }]\n          }, {\n              xtype: 'fieldset',\n              items: [{\n                  xtype: 'textfield',\n                  label: '都道府県',\n                  name: 'pref'\n              }, {\n                  xtype: 'textfield',\n                  label: '市区町村',\n                  name: 'add1'\n              }, {\n                  xtype: 'textfield',\n                  label: '町名',\n                  name: 'add2'\n              }, {\n                  xtype: 'textfield',\n                  label: '番地',\n                  name: 'add3'\n              }, {\n                  xtype: 'textfield',\n                  label: '建物等',\n                  name: 'add4'\n              }]\n          }]\n      }\n  });\n</code></pre></li>\n</ul>\n\n","title":"Formの作成"});