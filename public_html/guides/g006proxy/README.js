Ext.data.JsonP.g006proxy({"guide":"<h1 id='g006proxy-section-proxy%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B'>Proxyを設定する</h1>\n\n<p>今回のセミナーではサーバーサイドの実装はしません。\nこちらの方で、皆さんが利用できるサーバーを用意してきましたので、それを使います。</p>\n\n<p>モデルにプロキシ(Proxy)を設定すると、そのモデルがどのようにデータを取得するかを設定できます。</p>\n\n<h3 id='g006proxy-section-proxy%2Freader%2Fwriter'>Proxy/Reader/Writer</h3>\n\n<ul>\n<li><p>Proxy = データのありかを知っていて、そことやりとりをする</p>\n\n<ul>\n<li>Server Proxy\n\n<ul>\n<li>Ajax Proxy</li>\n<li>JSONP Proxy</li>\n</ul>\n</li>\n<li>Client Proxy\n\n<ul>\n<li>LocalStrage Proxy</li>\n<li>SessionStrage Proxy</li>\n<li>WebSQL Proxy</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Reader/Writer = データの保存形式を知っていて、それとモデルの変換をする</p>\n\n<ul>\n<li>Json Reader/Writer</li>\n<li>XML Reader/Writer</li>\n</ul>\n</li>\n<li><p>Proxy/Reader/Writerは、クラス単独で使うことはなく、\nモデルやストアの<code>proxy</code>コンフィグに設定します。</p>\n\n<pre><code>  proxy: {\n      type: 'ajax',\n      url: 'data/mydata.php',\n      reader: {\n          type: 'json'\n          rootProperty: 'data'\n      }\n  }\n</code></pre></li>\n</ul>\n\n\n<h3 id='g006proxy-section-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%A9%A6%E3%81%99'>データを試す</h3>\n\n<p>次のコードをコピーして、今作っているアプリを実行中のChromeデベロッパーツールのコンソールにペーストして実行してみましょう。\nサーバーがどんなデータを返すのかを見ることができます。</p>\n\n<pre class='inline-example '><code>Ext.require('Ext.Ajax', function() {\n    Ext.Ajax.request({\n        url: 'http://sencha.sunvisor.net/persons.php',\n        method: 'get',\n        success: function(ret) {\n            var obj = Ext.decode(ret.responseText);\n\n            console.table(obj.data);\n        }\n    });\n});\n</code></pre>\n\n<p>本来は通信できない他のドメインのデータに、Ajaxで通信していますが、\nサーバー側でXHR2でのクロスドメイン通信を可能にしているので、\n普通に通信できます。</p>\n\n<h2 id='g006proxy-section-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86-%2305'>やってみよう #05</h2>\n\n<blockquote><p>※ 直前のハンズオンがうまくいかなかった方のために、ここまでの結果を用意しています。\n<a href=\"http://sencha.sunvisor.net/devlove/cl04.zip\">こちらからダウンロードして</a>\nドキュメントルートのdevloveディレクトリの下に解凍してください。</p></blockquote>\n\n<p>それではモデルにプロキシを設定しましょう。</p>\n\n<h3 id='g006proxy-section-%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AB%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E8%BF%BD%E5%8A%A0'>モデルにプロキシを追加</h3>\n\n<p>モデルにプロキシを設定して、先ほどのサーバーからデータを取得するようにします。</p>\n\n<pre><code>Ext.define('ContactList.model.Contact', {\n    extend: 'Ext.data.Model',\n\n    config: {\n\n        fields: [\n            { name: 'name', type: 'string' },\n            { name: 'name_kana', type: 'string' },\n            { name: 'gender', type: 'string' },\n            { name: 'dob', type: 'date' },\n            { name: 'mobile_phone', type: 'string' },\n            { name: 'email', type: 'string' }\n        ],\n\n        // ここから\n        proxy: {\n            type: 'ajax',\n            id: 'egg-contact-list'\n        }\n        // ここまで\n    }\n});\n</code></pre>\n\n<h3 id='g006proxy-section-model%2Fstore%E3%82%92app.js%E3%81%AB%E5%AE%9A%E7%BE%A9'>Model/Storeをapp.jsに定義</h3>\n\n<ul>\n<li>作成したModelとStoreをアプリケーションに読み込ませます。</li>\n<li><p>そのためには、app.jsファイルのコンフィグに次のものを追加します。</p>\n\n<pre><code>  models: [\n      'Contact'\n  ],\n\n  stores: [\n      'Contacts'\n  ],\n</code></pre></li>\n</ul>\n\n\n<h3 id='g006proxy-section-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7%E7%A2%BA%E8%AA%8D'>コンソールで確認</h3>\n\n<ul>\n<li>実際にデータを取得できるかどうかを試しましょう。</li>\n<li><p>次のコードをChromeデベロッパーツールのコンソールにコピペして実行してみましょう。</p>\n\n<pre class='inline-example '><code>store = Ext.getStore('Contacts');\n  store.load(function() {\n      store.each(function(rec) { console.log(rec.get('last_name')) })\n  });\n</code></pre></li>\n<li><p>25名分のデータがコンソールに表示されます。</p></li>\n<li>ページパラメータの既定値が、limit=25だからです。</li>\n</ul>\n\n","title":"Proxyを設定する"});